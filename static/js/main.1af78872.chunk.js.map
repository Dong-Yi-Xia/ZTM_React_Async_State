{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","handleClick","setState","prevState","prevProps","meaningOfLife","increment","console","log","state","className","src","logo","alt","this","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wNAAe,MAA0B,iC,eC6D1BA,E,kDAvDb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAsBRC,YAAc,WAIZ,EAAKC,UAAS,SAACC,EAAWC,GACxB,MAAO,CAAEC,cAAeF,EAAUE,cAAgBD,EAAUE,cAE5D,kBAAMC,QAAQC,IAAI,EAAKC,MAAMJ,mBA5B/B,EAAKI,MAAQ,CACXJ,cAAe,IAEjB,EAAKL,MAAQA,EALG,E,0CAmClB,WAEE,OACE,qBAAKU,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,4BACGC,KAAKL,MAAMJ,gBAEd,wBACEU,QAASD,KAAKb,YADhB,mC,GA9CQe,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAQ,cAAC,EAAD,CAAKtB,UAAW,IAAMuB,SAASC,eAAe,SAM/DZ,M","file":"static/js/main.1af78872.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  //Pass in props inside both teh constructor and super\n  constructor(props){\n    super(props)\n    this.state = {\n      meaningOfLife: 47\n    }\n    this.props = props\n  }\n\n  // If you want to setup state quickly, set state as a class\n  // state = {\n  //   meaningOfLife : 47\n  // }\n\n\n\n  // Bad Practice\n  // handleClick = () => {\n  //   this.setState({\n  //     meaningOfLife: this.state.meaningOfLife + 1\n  //   })\n  // }\n\n\n  handleClick = () => {\n    //this.setState is asynchronously \n    //Don't call this.state/this.props directly, especially calculation\n    //But rather use a function, prevState, prevProps contain the latest infomation \n    this.setState((prevState, prevProps) => {\n      return { meaningOfLife: prevState.meaningOfLife + prevProps.increment  }\n    }, // second parameter\n      () => console.log(this.state.meaningOfLife)\n    )\n  }\n\n  \n  render(){\n// console.log(this.props)\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            {this.state.meaningOfLife}\n          </p>\n          <button\n            onClick={this.handleClick}\n          >\n            Update State\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render( <App increment={1}/>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}